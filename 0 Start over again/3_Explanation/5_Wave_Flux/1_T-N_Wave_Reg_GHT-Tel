import numpy as np
import xarray as xr
import pandas as pd
import scipy
from scipy import signal
from scipy.stats import linregress
import cartopy.crs as ccrs
import cartopy.mpl.ticker as cticker
import cartopy.feature as cfeature #用于添加地理属性的库
import metpy.calc as mpcalc
from metpy.units import units
from metpy.constants import earth_avg_radius
import matplotlib.pyplot as plt
import cartopy.crs as ccrs
from cartopy.util import add_cyclic_point #进行循环
import cartopy.feature as cfeature #用于添加地理属性的库
from cartopy.mpl.ticker import LongitudeFormatter,LatitudeFormatter #添加经纬度需要

#---遥相关指数---#
teli = pd.read_csv(r'F:\7_Data\0_Science_Program\1_Graduation_Program\Teleconnectivity\Tel_index_STD.csv', usecols=['NAI_STD', 'EUI_STD', 'EAI_STD', 'WAI_STD', 'CNAI_STD', 'ANAI_STD', 'BSI_STD'])

# 一些常数
p = 200 * units('hPa')  # 也有用300hPa的
p0 = 1000 * units('hPa')
latrange = np.arange(0, 92.5, 2.5)


# -------- 读取数据 --------#
f_z = xr.open_dataset(r'F:\7_Data\0_Science_Program\1_Graduation_Program\Ncep\hgt.mon.mean.nc')
f_u = xr.open_dataset(r'F:\7_Data\0_Science_Program\1_Graduation_Program\Ncep\uwnd.mon.mean.nc')
f_v = xr.open_dataset(r'F:\7_Data\0_Science_Program\1_Graduation_Program\Ncep\vwnd.mon.mean.nc')

# 读取200hPa的GHT,U,V
# year作为背景场，sum作为目标场去回归
hgt_year = f_z.hgt.sel(level=p, lat=latrange).loc['1979-01-01':'2019-12-01'].groupby('time.year').mean(dim='time', skipna=True) * units('m')
u_year = f_u.uwnd.sel(level=p, lat=latrange).loc['1950-01-01':'2019-12-01'].groupby('time.year').mean(dim='time', skipna=True) * units('m/s')
v_year = f_v.vwnd.sel(level=p, lat=latrange).loc['1950-01-01':'2019-12-01'].groupby('time.year').mean(dim='time', skipna=True) * units('m/s')
hgt_sum = f_z.hgt.sel(level=p, lat=latrange).loc[(f_z.time.dt.month.isin([6, 7, 8]))].loc['1950-01-01':'2019-12-01'].groupby('time.year').mean(dim='time', skipna=True)
u_sum = f_u.uwnd.sel(level=p, lat=latrange).loc[(f_u.time.dt.month.isin([6, 7, 8]))].loc['1950-01-01':'2019-12-01'].groupby('time.year').mean(dim='time', skipna=True)
v_sum = f_v.vwnd.sel(level=p, lat=latrange).loc[(f_u.time.dt.month.isin([6, 7, 8]))].loc['1950-01-01':'2019-12-01'].groupby('time.year').mean(dim='time', skipna=True)


# -------- 去线性趋势 --------- #
# sum的三个变量去线性趋势
hgt_detrend = scipy.signal.detrend(hgt_sum, axis=0, type='linear', overwrite_data=False)
u_detrend = scipy.signal.detrend(u_sum, axis=0, type='linear', overwrite_data=False)
v_detrend = scipy.signal.detrend(v_sum, axis=0, type='linear', overwrite_data=False)
hgt_year_mean = hgt_sum.mean('year')
u_year_mean = u_sum.mean('year')
v_year_mean = v_sum.mean('year')
for iyear in range(70):
    hgt_detrend[iyear, :, :] = hgt_detrend[iyear, :, :] + hgt_year_mean[:, :]
    u_detrend[iyear, :, :] = u_detrend[iyear, :, :] + u_year_mean[:, :]
    v_detrend[iyear, :, :] = v_detrend[iyear, :, :] + v_year_mean[:, :]
# 求回归
phgt, u_reg, v_reg, hgt_reg = np.zeros((37, 144)), np.zeros((37, 144)), np.zeros((37, 144)), np.zeros((37, 144))
for i in range(37):
       for j in range(144):
              hgt_reg[i, j], _, _, phgt[i, j], _ = linregress(teli.iloc[:, 0], hgt_detrend[:, i, j])
              u_reg[i, j], _, _, _, _ = linregress(teli.iloc[:, 0], u_detrend[:, i, j])
              v_reg[i, j], _, _, _, _ = linregress(teli.iloc[:, 0], v_detrend[:, i, j])
# 现在所有的reg_sum 代替纬偏值
lon, lat = hgt_sum.lon, hgt_sum.lat
hgt_reg = xr.DataArray(hgt_reg, coords=[lat, lon], dims=['lat', 'lon'])
u_reg = xr.DataArray(u_reg, coords=[lat, lon], dims=['lat', 'lon'])
v_reg = xr.DataArray(v_reg, coords=[lat, lon], dims=['lat', 'lon'])
hgt_reg = hgt_reg * units('m')
u_reg =  u_reg * units('m/s')
v_reg =  v_reg * units('m/s')

# --------- 变量 -------- #
# 气候场
Φ_climatic = mpcalc.height_to_geopotential(hgt_year)
u_climatic = u_year.mean(dim='year', skipna=True)
v_climatic = v_year.mean(dim='year', skipna=True)
wind_climatic = mpcalc.wind_speed(u_climatic, v_climatic)
# 目标场: Φ(hgt_sum), u_reg, v_reg
hgt_sum = hgt_sum * units('m')
Φ = mpcalc.height_to_geopotential(hgt_sum)
# Φ = Φ.mean(dim='year') # [37, 144]

# 经纬度转为弧度制
lon_deg = Φ['lon'].copy()
lat_deg = Φ['lat'].copy()
lon_rad = np.deg2rad(lon_deg) * units('1')
lat_rad = np.deg2rad(lat_deg) * units('1')
# 科氏参数
f = mpcalc.coriolis_parameter(Φ['lat'])
f = f.assign_coords({'lat': lat_rad})
# 常数
cosφ = np.cos(lat_rad)
# uv气候态改为弧度制
u_climatic = u_climatic.assign_coords({'lon': lon_rad, 'lat': lat_rad})
v_climatic = v_climatic.assign_coords({'lon': lon_rad, 'lat': lat_rad})
cosφ = cosφ.assign_coords({'lat': lat_rad})
wind_climatic = wind_climatic.assign_coords({'lon': lon_rad, 'lat': lat_rad})




# 位势的纬向偏差
 # 日志1
Φ_prime = -(Φ_climatic.mean(dim='lon')+ (-1 * Φ))
#  # 日志2
# Φ_prime =  Φ

# 将需要对弧度制经纬度求偏导的量的坐标都换成弧度制经纬度
Φ_prime = Φ_prime.assign_coords({'lon': lon_rad, 'lat': lat_rad})
# 准地转流函数相对于气候场的扰动
Ψ_prime = Φ_prime / f







# 对准地准流函数去线性趋势
Ψ_prime = np.array(Ψ_prime)
Ψ_prime_detrend = scipy.signal.detrend(Ψ_prime[:, 1:, :], axis=0, type='linear', overwrite_data=False)
Ψ_prime_mean = Ψ_prime.mean(0)
for iyear in range(70):
    Ψ_prime[iyear, 1:, :] = Ψ_prime_detrend[iyear, :, :] + Ψ_prime_mean[1:, :]
# 求回归
Ψ_reg = np.zeros((37, 144))
for i in range(37):
       for j in range(144):
              Ψ_reg[i, j], _, _, _, _ = linregress(teli.iloc[:, 0], Ψ_prime[:, i, j])
Ψ_prime = xr.DataArray(Ψ_reg, coords=[lat_rad, lon_rad], dims=['lat', 'lon'])
Ψ_prime = Ψ_prime* units('meter ** 2 / second')

#---偏导过程---#
dΨ_prime_dλ = Ψ_prime.differentiate('lon')
dΨ_prime_dφ = Ψ_prime.differentiate('lat')
ddΨ_prime_ddλ = dΨ_prime_dλ.differentiate('lon')
ddΨ_prime_ddφ = dΨ_prime_dφ.differentiate('lat')
ddΨ_prime_dλφ = dΨ_prime_dλ.differentiate('lat')


#---计算部分---#
# T-N波作用通量的水平分量公共部分
temp1 = p / p0 * cosφ / (2 * wind_climatic * earth_avg_radius**2)
temp2 = dΨ_prime_dλ * dΨ_prime_dφ - Ψ_prime * ddΨ_prime_dλφ
# T-N波作用通量的水平分量
fx = temp1 * (u_climatic / cosφ**2 * (dΨ_prime_dλ**2 - Ψ_prime * ddΨ_prime_ddλ) + v_climatic / cosφ * temp2)
fy = temp1 * (u_climatic / cosφ * temp2 + v_climatic * (dΨ_prime_dφ**2 - Ψ_prime * ddΨ_prime_ddφ))

# # 一顿偏导猛如虎
# dΨ_reg_dλ = Ψ_reg.differentiate('lon')
# dΨ_reg_dφ = Ψ_reg.differentiate('lat')
# ddΨ_reg_ddλ = dΨ_reg_dλ.differentiate('lon')
# ddΨ_reg_ddφ = dΨ_reg_dφ.differentiate('lat')
# ddΨ_reg_dλφ = dΨ_reg_dλ.differentiate('lat')
#
# # T-N波作用通量的水平分量公共部分
# temp1 = p / p0 * cosφ / (2 * wind_climatic * earth_avg_radius**2)
# temp2 = dΨ_reg_dλ * dΨ_reg_dφ - Ψ_reg * ddΨ_reg_dλφ
#
# # T-N波作用通量的水平分量
# fx = temp1 * (u_climatic / cosφ**2 * (dΨ_reg_dλ**2 - Ψ_reg * ddΨ_reg_ddλ) + v_climatic / cosφ * temp2)
# fy = temp1 * (u_climatic / cosφ * temp2 + v_climatic * (dΨ_reg_dφ**2 - Ψ_reg * ddΨ_reg_ddφ))

# # 把弧度制经纬度再换成角度制便于画图
lon = lon_deg.values
# lon[lon>180] -= 360
fx = fx.assign_coords({'lon': lon, 'lat': lat_deg}).sortby(['lon', 'lat'])
fy = fy.assign_coords({'lon': lon, 'lat': lat_deg}).sortby(['lon', 'lat'])


# -------- 绘图部分 -------- #
fig = plt.figure(figsize=(5,5), dpi=600)
lat = hgt_year.lat
lon = hgt_year.lon
# fig.subplots_adjust(hspace=0.3) # 子图间距
ax = fig.add_subplot(1, 1, 1, projection=ccrs.PlateCarree(central_longitude=0))
# ax.set_title('reg(H-' + TEL_name[(nrow)] + ',GHT)')
# ax.set_title(abc[nrow], loc='left')
# 刻度形式
ax.set_xticks([-180, -150, -120, -90, -60, -30, 0, 30, 60, 90, 120, 150, 180])  # 指定要显示的经纬度
ax.set_yticks([0, 30, 60, 90])
ax.xaxis.set_major_formatter(LongitudeFormatter())  # 刻度格式转换为经纬度样式
ax.yaxis.set_major_formatter(LatitudeFormatter())
# 调整图的内容：投影方式，海岸线
ax.add_feature(cfeature.COASTLINE.with_scale('50m'), lw=0.4)  # 添加海岸线
ax_cf1 = ax.contourf(lon, lat, hgt_reg, transform=ccrs.PlateCarree(), zorder=0, cmap='coolwarm',
                             levels=np.arange(-16, 18, 2), extend='both')
ax.quiver(lon[::2], lat[::2], fx[::2,::2], fy[::2,::2], scale=8)
# axs2[nrow].contourf(clons, lat, P[nrow, :, :], levels=[0, 0.05, 1], hatches=['...', None], zorder=1, colors="none",
#                     transform=ccrs.PlateCarree())
fig.subplots_adjust(bottom=0.1)
position = fig.add_axes([0.15, 0.05, 0.7, 0.015])  # 位置[左,下,右,上]
cb = fig.colorbar(ax_cf1, shrink=0.6, cax=position, orientation='horizontal', extend='both')
plt.show()



